// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/gateway.proto

package v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TLS modes enforced by the proxy
type Server_TLSOptions_TLSmode int32

const (
	// If set to "passthrough", the proxy will forward the connection
	// to the upstream server selected based on the SNI string presented
	// by the client.
	Server_TLSOptions_PASSTHROUGH Server_TLSOptions_TLSmode = 0
	// If set to "simple", the proxy will secure connections with
	// standard TLS semantics.
	Server_TLSOptions_SIMPLE Server_TLSOptions_TLSmode = 1
	// If set to "mutual", the proxy will secure connections to the
	// upstream using mutual TLS by presenting client certificates for
	// authentication.
	Server_TLSOptions_MUTUAL Server_TLSOptions_TLSmode = 2
)

var Server_TLSOptions_TLSmode_name = map[int32]string{
	0: "PASSTHROUGH",
	1: "SIMPLE",
	2: "MUTUAL",
}
var Server_TLSOptions_TLSmode_value = map[string]int32{
	"PASSTHROUGH": 0,
	"SIMPLE":      1,
	"MUTUAL":      2,
}

func (x Server_TLSOptions_TLSmode) String() string {
	return proto.EnumName(Server_TLSOptions_TLSmode_name, int32(x))
}
func (Server_TLSOptions_TLSmode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1, 0, 0}
}

// Gateway describes a load balancer operating at the edge of the mesh
// receiving incoming or outgoing HTTP/TCP connections. The specification
// describes a set of ports that should be exposed, the type of protocol to
// use, SNI configuration for the load balancer, etc.
//
// For example, the following gateway spec sets up a proxy to act as a load
// balancer exposing port 80 and 9080 (http), 443 (https), and port 2379
// (TCP) for ingress.  The gateway will be applied to the proxy running on
// a pod with labels "podRole: gateway-pod". While Istio will configure the
// proxy to listen on these ports, it is the responsibility of the user to
// ensure that external traffic to these ports are allowed into the mesh.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       workloadLabels:
//       - podRole: gatweway-pod
//       servers:
//       - port:
//           number: 80
//           name: http
//         hosts:
//         - uk.bookinfo.com
//         - eu.bookinfo.com
//         tls:
//           httpsRedirect: true # sends 302 redirect for http requests
//       - port:
//           number: 443
//           name: https
//         hosts:
//         - uk.bookinfo.com
//         - eu.bookinfo.com
//         tls:
//           mode: simple #enables HTTPS on this port
//           serverCert: /etc/certs/servercert.pem
//           privateKey: /etc/certs/privatekey.pem
//       - port:
//           number: 9080
//           name: http-wildcard
//         # no hosts implies wildcard match
//       - port:
//           number: 2379 #to expose internal service via external port 2379
//           name: Mongo
//           protocol: MONGO
//
// The gateway specification above describes the L4-L6 properties of a load
// balancer. Routing rules can then be bound to a gateway to control
// the forwarding of traffic arriving at a particular host or gateway port.
//
// The following sample route rule splits traffic for
// https://uk.bookinfo.com/reviews, https://eu.bookinfo.com/reviews,
// http://uk.bookinfo.com:9080/reviews, http://eu.bookinfo.com:9080/reviews
// into two versions (prod and qa) of an internal reviews service on port
// 9080. In addition, requests containing the cookie user: dev-123 will be
// sent to special port 7777 in the qa version. The same rule is also
// applicable inside the mesh for requests to the reviews.prod
// service. This rule is applicable across ports 443, 9080. Note that
// http://uk.bookinfo.com gets redirected to https://uk.bookinfo.com
// (i.e. 80 redirects to 443).
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-rule
//     spec:
//       hosts:
//       - reviews.prod
//       - uk.bookinfo.com
//       - eu.bookinfo.com
//       gateways:
//       - my-gateway
//       - mesh # applies to all the sidecars in the mesh
//       http:
//       - match:
//         - headers:
//             cookie:
//               user: dev-123
//         route:
//         - destination:
//             port:
//               number: 7777
//             name: reviews.qa
//       - match:
//           uri:
//             prefix: /reviews/
//         route:
//         - destination:
//             port:
//               number: 9080 # can be omitted if its the only port for reviews
//             name: reviews.prod
//           weight: 80
//         - destination:
//             name: reviews.qa
//           weight: 20
//
// The following routing rule forwards traffic arriving at (external) port
// 2379 from 172.17.16.0/24 subnet to internal Mongo server on port 5555. This
// rule is not applicable internally in the mesh as the gateway list omits
// the reserved name "mesh".
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-Mongo
//     spec:
//       hosts:
//       - Mongosvr #name of Mongo service
//       gateways:
//       - my-gateway
//       tcp:
//       - match:
//         - port:
//             number: 2379
//           sourceSubnet: "172.17.16.0/24"
//         route:
//         - destination:
//             name: mongo.prod
//
type Gateway struct {
	// REQUIRED: A list of server specifications.
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	// REQUIRED: One or more labels that indicate a specific set of pods/VMs
	// on which this gateway configuration should be applied.
	WorkloadLabels map[string]string `protobuf:"bytes,2,rep,name=workloadLabels" json:"workloadLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Gateway) Reset()                    { *m = Gateway{} }
func (m *Gateway) String() string            { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()               {}
func (*Gateway) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Gateway) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Gateway) GetWorkloadLabels() map[string]string {
	if m != nil {
		return m.WorkloadLabels
	}
	return nil
}

// Server describes the properties of the proxy on a given load balancer port.
// For example,
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-ingress
//     spec:
//       workloadLabels:
//       - podRole: ingress-gateway
//       servers:
//       - port:
//           number: 80
//           protocol: HTTP2
//
// Another example
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-tcp-ingress
//     spec:
//       workloadLabels:
//       - podRole: tcp-ingress-pod
//       servers:
//       - port:
//           number: 27018
//           protocol: MONGO
//
// The following is an example of TLS configuration for port 443
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-ingress
//     spec:
//       workloadLabels:
//       - podRole: ingress-tls
//       servers:
//       - port:
//           number: 443
//           protocol: HTTP
//         tls:
//           mode: simple
//           serverCertificate: /etc/certs/server.pem
//           privateKey: /etc/certs/privatekey.pem
//
type Server struct {
	// REQUIRED: The Port on which the proxy should listen for incoming
	// connections
	Port *Port `protobuf:"bytes,1,opt,name=port" json:"port,omitempty"`
	// A list of hosts exposed by this gateway. While
	// typically applicable to HTTP services, it can also be used for TCP
	// services using TLS with SNI. Standard DNS wildcard prefix syntax
	// is permitted.
	//
	// RouteRules that are bound to a gateway must having a matching host
	// in their default destination. Specifically one of the route rule
	// destination hosts is a strict suffix of a gateway host or
	// a gateway host is a suffix of one of the route rule hosts.
	Hosts []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
	// Set of TLS related options that govern the server's behavior. Use
	// these options to control if all http requests should be redirected to
	// https, and the TLS modes to use.
	Tls *Server_TLSOptions `protobuf:"bytes,3,opt,name=tls" json:"tls,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Server) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Server) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Server) GetTls() *Server_TLSOptions {
	if m != nil {
		return m.Tls
	}
	return nil
}

type Server_TLSOptions struct {
	// If set to true, the load balancer will send a 302 redirect for all
	// http connections, asking the clients to use HTTPS.
	HttpsRedirect bool `protobuf:"varint,1,opt,name=https_redirect,json=httpsRedirect" json:"https_redirect,omitempty"`
	// Optional: Indicates whether connections to this port should be
	// secured using TLS. The value of this field determines how TLS is
	// enforced.
	Mode Server_TLSOptions_TLSmode `protobuf:"varint,2,opt,name=mode,enum=istio.routing.v1alpha2.Server_TLSOptions_TLSmode" json:"mode,omitempty"`
	// REQUIRED if mode is "simple" or "mutual". The path to the file
	// holding the server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,3,opt,name=server_certificate,json=serverCertificate" json:"server_certificate,omitempty"`
	// REQUIRED if mode is "simple" or "mutual". The path to the file
	// holding the server's private key.
	PrivateKey string `protobuf:"bytes,4,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// REQUIRED if mode is "mutual". The path to a file containing
	// certificate authority certificates to use in verifying a presented
	// client side certificate.
	CaCertificates string `protobuf:"bytes,5,opt,name=ca_certificates,json=caCertificates" json:"ca_certificates,omitempty"`
	// A list of alternate names to verify the subject identity in the
	// certificate presented by the client.
	SubjectAltNames []string `protobuf:"bytes,6,rep,name=subject_alt_names,json=subjectAltNames" json:"subject_alt_names,omitempty"`
}

func (m *Server_TLSOptions) Reset()                    { *m = Server_TLSOptions{} }
func (m *Server_TLSOptions) String() string            { return proto.CompactTextString(m) }
func (*Server_TLSOptions) ProtoMessage()               {}
func (*Server_TLSOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

func (m *Server_TLSOptions) GetHttpsRedirect() bool {
	if m != nil {
		return m.HttpsRedirect
	}
	return false
}

func (m *Server_TLSOptions) GetMode() Server_TLSOptions_TLSmode {
	if m != nil {
		return m.Mode
	}
	return Server_TLSOptions_PASSTHROUGH
}

func (m *Server_TLSOptions) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *Server_TLSOptions) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *Server_TLSOptions) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *Server_TLSOptions) GetSubjectAltNames() []string {
	if m != nil {
		return m.SubjectAltNames
	}
	return nil
}

// Port describes the properties of a specific port of a service.
type Port struct {
	// REQUIRED: A valid non-negative integer port number.
	Number uint32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// The protocol exposed on the port.
	// MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP.
	Protocol string `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	// Label assigned to the port.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Port) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Gateway)(nil), "istio.routing.v1alpha2.Gateway")
	proto.RegisterType((*Server)(nil), "istio.routing.v1alpha2.Server")
	proto.RegisterType((*Server_TLSOptions)(nil), "istio.routing.v1alpha2.Server.TLSOptions")
	proto.RegisterType((*Port)(nil), "istio.routing.v1alpha2.Port")
	proto.RegisterEnum("istio.routing.v1alpha2.Server_TLSOptions_TLSmode", Server_TLSOptions_TLSmode_name, Server_TLSOptions_TLSmode_value)
}

func init() { proto.RegisterFile("routing/v1alpha2/gateway.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x4e, 0x13, 0x41,
	0x14, 0x75, 0xdb, 0x52, 0xe8, 0x6d, 0x68, 0xcb, 0xd5, 0x90, 0x4d, 0xa3, 0x40, 0x9a, 0x18, 0xd1,
	0xc4, 0xad, 0x2c, 0x2f, 0x44, 0x9f, 0xaa, 0x69, 0xc0, 0x58, 0xa0, 0x99, 0x6d, 0x63, 0xa2, 0x0f,
	0x9b, 0xe9, 0x76, 0xa4, 0x23, 0xdb, 0x9d, 0xcd, 0xcc, 0xb4, 0xa4, 0xdf, 0xe9, 0x27, 0xf0, 0x23,
	0x66, 0x66, 0x16, 0x41, 0x02, 0xc6, 0xb7, 0x7b, 0xcf, 0x9c, 0x73, 0xf6, 0xde, 0x33, 0x3b, 0xb0,
	0x23, 0xc5, 0x42, 0xf3, 0xec, 0xa2, 0xbb, 0x3c, 0xa0, 0x69, 0x3e, 0xa3, 0x61, 0xf7, 0x82, 0x6a,
	0x76, 0x45, 0x57, 0x41, 0x2e, 0x85, 0x16, 0xb8, 0xcd, 0x95, 0xe6, 0x22, 0x28, 0x58, 0xc1, 0x0d,
	0xab, 0x73, 0xed, 0xc1, 0xfa, 0xb1, 0x63, 0xe2, 0x11, 0xac, 0x2b, 0x26, 0x97, 0x4c, 0x2a, 0xdf,
	0xdb, 0x2b, 0xef, 0xd7, 0xc3, 0x9d, 0xe0, 0x61, 0x55, 0x10, 0x59, 0x1a, 0xb9, 0xa1, 0xe3, 0x77,
	0x68, 0x5c, 0x09, 0x79, 0x99, 0x0a, 0x3a, 0x1d, 0xd0, 0x09, 0x4b, 0x95, 0x5f, 0xb2, 0x06, 0x87,
	0x8f, 0x19, 0x14, 0x9f, 0x0c, 0xbe, 0xfe, 0xa5, 0xea, 0x67, 0x5a, 0xae, 0xc8, 0x3d, 0xab, 0x76,
	0x0f, 0x9e, 0x3e, 0x40, 0xc3, 0x16, 0x94, 0x2f, 0xd9, 0xca, 0xf7, 0xf6, 0xbc, 0xfd, 0x1a, 0x31,
	0x25, 0x3e, 0x83, 0xb5, 0x25, 0x4d, 0x17, 0xcc, 0x2f, 0x59, 0xcc, 0x35, 0xef, 0x4b, 0x47, 0x5e,
	0xe7, 0xba, 0x0c, 0x55, 0x37, 0x33, 0xbe, 0x83, 0x4a, 0x2e, 0xa4, 0xb6, 0xba, 0x7a, 0xf8, 0xfc,
	0xb1, 0x01, 0x87, 0x42, 0x6a, 0x62, 0x99, 0xc6, 0x76, 0x26, 0x94, 0x76, 0x3b, 0xd5, 0x88, 0x6b,
	0xf0, 0x03, 0x94, 0x75, 0xaa, 0xfc, 0xb2, 0xb5, 0x79, 0xfd, 0xef, 0xa0, 0x82, 0xd1, 0x20, 0x3a,
	0xcf, 0x35, 0x17, 0x99, 0x22, 0x46, 0xd5, 0xfe, 0x55, 0x02, 0xb8, 0xc5, 0xf0, 0x25, 0x34, 0x66,
	0x5a, 0xe7, 0x2a, 0x96, 0x6c, 0xca, 0x25, 0x4b, 0xdc, 0x74, 0x1b, 0x64, 0xd3, 0xa2, 0xa4, 0x00,
	0xb1, 0x0f, 0x95, 0xb9, 0x98, 0xba, 0xf5, 0x1a, 0xe1, 0xc1, 0x7f, 0x7f, 0xd3, 0x94, 0x46, 0x48,
	0xac, 0x1c, 0xdf, 0x02, 0xba, 0x7b, 0x8b, 0x13, 0x26, 0x35, 0xff, 0xc1, 0x13, 0xaa, 0x99, 0x5d,
	0xa4, 0x46, 0xb6, 0xdc, 0xc9, 0xa7, 0xdb, 0x03, 0xdc, 0x85, 0x7a, 0x2e, 0xf9, 0x92, 0x6a, 0x16,
	0x9b, 0xbc, 0x2b, 0x96, 0x07, 0x05, 0xf4, 0x85, 0xad, 0xf0, 0x15, 0x34, 0x13, 0x7a, 0xd7, 0x4b,
	0xf9, 0x6b, 0x96, 0xd4, 0x48, 0xe8, 0x1d, 0x23, 0x85, 0x6f, 0x60, 0x4b, 0x2d, 0x26, 0x3f, 0x59,
	0xa2, 0x63, 0x9a, 0xea, 0x38, 0xa3, 0x73, 0xa6, 0xfc, 0xaa, 0x0d, 0xb5, 0x59, 0x1c, 0xf4, 0x52,
	0x7d, 0x66, 0xe0, 0x4e, 0x08, 0xeb, 0xc5, 0xd4, 0xd8, 0x84, 0xfa, 0xb0, 0x17, 0x45, 0xa3, 0x13,
	0x72, 0x3e, 0x3e, 0x3e, 0x69, 0x3d, 0x41, 0x80, 0x6a, 0xf4, 0xf9, 0x74, 0x38, 0xe8, 0xb7, 0x3c,
	0x53, 0x9f, 0x8e, 0x47, 0xe3, 0xde, 0xa0, 0x55, 0xea, 0x9c, 0x41, 0xc5, 0x5c, 0x1b, 0x6e, 0x43,
	0x35, 0x5b, 0xcc, 0x27, 0x4c, 0xda, 0x18, 0x37, 0x49, 0xd1, 0x61, 0x1b, 0x36, 0xec, 0x63, 0x48,
	0x44, 0x5a, 0xfc, 0x22, 0x7f, 0x7a, 0x44, 0xa8, 0x98, 0x79, 0x8a, 0x18, 0x6c, 0xfd, 0x71, 0xf7,
	0xdb, 0x0b, 0x17, 0x31, 0x17, 0x5d, 0x9a, 0xf3, 0xee, 0xfd, 0x27, 0x36, 0xa9, 0x5a, 0xf9, 0xe1,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x12, 0x61, 0xae, 0x7d, 0x03, 0x00, 0x00,
}
