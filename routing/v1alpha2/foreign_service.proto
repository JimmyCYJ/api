// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "routing/v1alpha2/gateway.proto";

package istio.routing.v1alpha2;

// Foreign service describes the endpoints, ports and protocols of a
// white-listed set of mesh-external domains and IP blocks that services in
// the mesh are allowed to access.
//
// NOTE: If a foreign service has the same name as a service in the
// service registry, the foreign service's declaration will be given
// precedence.
//
// For example, the following foreign service configuration describes the
// set of services at https://example.com. Eventhough the services behind
// example.com have to be accessed via HTTPS, in order for the application
// to obtain metrics from Istio, a plain text port (HTTP over port 80) is
// declared in addition to a secure port (HTTPS over 443). Connections
// arriving at port 443 on the sidecar will be treated as opaque TCP
// connections and will be forwarded as is to the destination, with limited
// visibility into the application flow. Connections arriving on port 80 on
// the sidecar will be able to take advantage of Istio's advanced routing
// and policy enforcement features. To transparently re-route http
// connections to the destination's https port, a routing rule is needed as
// shown below.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc
//     spec:
//       hosts:
//       - example.com
//       ports:
//       - number: 443
//         name: example-https
//         protocol: https #treated as opaque TCP
//       - number: 80
//         name: http
//         protocol: example-http
//       discovery: none
// 
// And the associated route rule to upgrade from http to https
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-foreign-rule
//     spec:
//       hosts:
//       - example.com
//       http:
//       - match:
//         - port:
//             name: http
//         route:
//         - destination:
//             name: example.com
//             port:
//               name: https
//
// IF the application wishes the sidecar to load balance across several
// hosts backing the foreign service, the discovery mode must be set to one
// of "static" or "dns". The following specification specifies a static set
// of backend nodes for a mongodb cluster behind a set of virtual IPs.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-mongocluster
//     spec:
//       hosts:
//       - 192.192.192.192/24
//       ports:
//       - number: 27018
//         name: mongodb
//         protocol: mongo
//       discovery: static
//       endpoints:
//       - address: 2.2.2.2
//         ports:
//         - number: 2222
//           name: mongo-host1
//           protocol: mongo
//       - address: 3.3.3.3
//         ports:
//         - number: 3333
//           name: mongo-host2
//           protocol: mongo
//
// The following example demonstrates the use of DNS to dynamically load
// the endpoints for a given foreign service:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-dns-example
//     spec:
//       hosts:
//       - foo.bar.com
//       ports:
//       - number: 80
//         name: http
//         protocol: http
//       discovery: dns
//
// The application can use HTTP_PROXY settings or IP tables based
// redirection to transparently reroute calls for foo.bar.com to the
// sidecar. The sidecar will resolve the DNS name (foo.bar.com) and load
// balance the requests across one of the endpoints.
//
// When using wildcarded hosts, neither static nor dns discovery mode can
// be used as shown below:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-dns-example
//     spec:
//       hosts:
//       - *.bar.com
//       ports:
//       - number: 80
//         name: http
//         protocol: http
//       discovery: none
//
message ForeignService {
  // REQUIRED. The hosts associated with the external service. Could be a
  // DNS name with wildcard prefix or a CIDR prefix. Note that the hosts
  // field applies to all protocols. Note that DNS names in hosts will be
  // ignored if the application accesses the service over non-HTTP
  // protocols such as mongo/opaque TCP/even HTTPS. In such scenarios, the
  // port on which the external service is being accessed must not be
  // shared by any other service in the mesh. In other words, the sidecar
  // will behave as a simple TCP proxy, forwarding incoming traffic on a
  // specified port to the specified destination endpoint IP/host.
  repeated string hosts = 1;

  // REQUIRED: The Ports associated with the external services.
  repeated Port ports = 2;

  // Different ways of discovering the IP addresses associated with the
  // service.
  enum Discovery {
    // If set to "none", the proxy will assume that incoming connections
    // have already been resolved (to a specific destination IP
    // address). Such connections are typically routed via the proxy using
    // mechanisms such as IP table REDIRECT/ eBPF. After performing any
    // routing related transformations, the proxy will forward the
    // connection to the IP address to which the connection was bound.
    NONE = 0;

    // If set to "static", the proxy will use specified endpoints (See
    // below) as the backing nodes associated with the foreign service.
    STATIC = 1;

    // If set to "dns", the proxy will attempt to resolve the DNS
    // address during request processing. Use this mode if the set of
    // resolved addresses change dynamically. The "dns" mode is applicable
    // only when the hosts use exact DNS names without any wildcards.
    DNS = 2;
  };

  // Service discovery mode for the hosts.
  Discovery discovery = 3;

  // Endpoint defines a network address (IP:port or hostname:port)
  // associated with the foreign service. Needed only for "static"
  // discovery mode.
  message Endpoint {
    // REQUIRED: Address associated with the network endpoint ( IP or fully
    // qualified domain name without wildcards).
    string address = 1;

    // The ports on which the endpoint is listening for network
    // connections. Endpoint ports are needed only if they differ from the
    // service ports defined above. Every port associated with the service
    // must have a corresponding port in the Endpoint with same name, with
    // same or different values. For example, the service could refer to
    // port named https with value 443, while the endpoints could refer to
    // "https" with value 8443. The application is expected to access the
    // service using http://<name>:443. The sidecar will automatically
    // reroute the calls to the appropriate endpoint port (8443).
    repeated Port ports = 2;

    // One or more labels associated with the endpoint.
    map<string, string> labels = 3;
  };

  // One or more endpoints associated with the service. Endpoints are valid
  // only when the discovery mode is set to "static".
  repeated Endpoint endpoints = 4;
}
