// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "routing/v1alpha2/gateway.proto";

package istio.routing.v1alpha2;

// Egress routes describe the properties of a service outside Istio. When
// transparent proxying is used, egress routes describe a white-listed set
// of domains that microserves in the mesh are allowed to access. A subset
// of features from routing rules and all features of destination rules can
// be applied on the service described by an egress route.
//
// Services using HTTPS will be treated as opaque TCP services. If features
// provided by routing rules (e.g., URL rewrites) or HTTP-level metrics
// generated by Envoy are required, the service must be accessed over
// HTTP. The sidecar will perform TLS origination on behalf of the
// application.
//
// Note that services described by an egress route will be visible at all
// sidecars in the mesh.
// 
// For example, the following EgressRoute describes the set of services
// hosted under the *.foo.com domain
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: EgressRoute
//     metadata:
//       name: foo-egress-rule
//     spec:
//       servers:
//       - port:
//           number: 443
//           name: http
//         domains:
//         - *.foo.com
//         tls:
//           mode: ORIGINATE
//
// Route rules can be applied to services described by an egress route. The
// following sample route rule rewrites /foocatalog to /barcatalog before
// forwarding the call to the intended destination.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: foo-rule
//     spec:
//       hosts:
//       - *.foo.com
//       http:
//       - match:
//         - uri:
//             prefix: /foocatalog
//         rewrite:
//           uri: /barcatalog
//
message EgressRoute {
  // REQUIRED: A list of server specifications.
  repeated Server servers = 1;
}
