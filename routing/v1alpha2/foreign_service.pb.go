// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/foreign_service.proto

package istio_routing_v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Different ways of discovering the IP addresses associated with the
// service.
type ForeignService_Discovery int32

const (
	// If set to "none", the proxy will assume that incoming connections
	// have already been resolved (to a specific destination IP
	// address). Such connections are typically routed via the proxy using
	// mechanisms such as IP table REDIRECT/ eBPF. After performing any
	// routing related transformations, the proxy will forward the
	// connection to the IP address to which the connection was bound.
	ForeignService_NONE ForeignService_Discovery = 0
	// If set to "static", the proxy will use the IP addresses specified in
	// endpoints (See below) as the backing nodes associated with the
	// foreign service.
	ForeignService_STATIC ForeignService_Discovery = 1
	// If set to "dns", the proxy will attempt to resolve the DNS address
	// during request processing. If no endpoints are specified, the proxy
	// will resolve the DNS address specified in the hosts field, if
	// wildcards are not used. If endpoints are specified, the DNS
	// addresses specified in the endpoints will be resolved to determine
	// the destination IP address.
	ForeignService_DNS ForeignService_Discovery = 2
)

var ForeignService_Discovery_name = map[int32]string{
	0: "NONE",
	1: "STATIC",
	2: "DNS",
}
var ForeignService_Discovery_value = map[string]int32{
	"NONE":   0,
	"STATIC": 1,
	"DNS":    2,
}

func (x ForeignService_Discovery) String() string {
	return proto.EnumName(ForeignService_Discovery_name, int32(x))
}
func (ForeignService_Discovery) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

// Foreign service describes the endpoints, ports and protocols of a
// white-listed set of mesh-external domains and IP blocks that services in
// the mesh are allowed to access.
//
// For example, the following foreign service configuration describes the
// set of services at https://example.com to be accessed internally over
// plaintext http (i.e. http://example.com), with the sidecar originating
// TLS.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-example
//     spec:
//       hosts:
//       - example.com
//       ports:
//       - inPort: 80
//         outPort: 443
//         name: example-http
//         protocol: http
//         tlsUpgrade: true
//       discovery: dns
//
// Eventhough the services behind example.com have to be accessed via
// HTTPS, in order for the application to obtain metrics from Istio, a
// plain text port (HTTP over port 80) is used in the rule
// above. Connections arriving on port 80 on the sidecar will be able to
// take advantage of Istio's advanced routing and policy enforcement
// features, while still being routed to the destination over HTTPS.
//
// The following specification specifies a static set of backend nodes for
// a MongoDB cluster behind a set of virtual IPs, and secures connections
// to the MongoDB cluster using TLS.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-mongocluster
//     spec:
//       hosts:
//       - 192.192.192.192/24
//       ports:
//       - inPort: 27018 # outPort is same as inPort
//         name: mongodb
//         protocol: mongo
//         tlsUpgrade: true
//       discovery: static
//       endpoints:
//       - address: 2.2.2.2
//       - address: 3.3.3.3
//
// Destination rules can be used to customize the default TLS
// configuration. For example, the following destination rule configures
// the sidecar to use mutual TLS authentication when connecting to the
// external MongoDB service.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: mtls-mongocluster
//     spec:
//       destination:
//         name: 192.192.192.192/24
//       tls:
//         mode: mutual
//         clientCertificate: /etc/certs/myclientcert.pem
//         privateKey: /etc/certs/client_private_key.pem
//         caCertificates: /etc/certs/rootcacerts.pem
//
// The following example demonstrates the use of wildcards in the hosts. If
// the connection has to be routed to the IP address requested by the
// application (i.e. application resolves DNS and attempts to connect to a
// specific IP), the discovery mode must be set to "none".
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-wildcard-example
//     spec:
//       hosts:
//       - *.bar.com
//       ports:
//       - inPort: 80
//         name: http
//         protocol: http
//       discovery: none
//
// For HTTP based services, tt is possible to create a virtual service
// backed by multiple DNS addressible endpoints. In such a scenario, the
// application can use the HTTP_PROXY environment variable to transparently
// reroute API calls for the virtual service to a chosen backend. For
// example, the following configuration creates a non-existent service
// called foo.bar.com backed by three domains: us.foo.bar.com,
// uk.foo.bar.com, and in.foo.bar.com
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignService
//     metadata:
//       name: foreign-svc-dns
//     spec:
//       hosts:
//       - foo.bar.com
//       ports:
//       - inPort: 80
//         name: http
//         protocol: http
//         outPort: 443
//         tlsUpgrade: true
//       discovery: dns
//       endpoints:
//       - address: us.foo.bar.com
//       - address: uk.foo.bar.com
//       - address: in.foo.bar.com
//
// With HTTP_PROXY=http://localhost:80, calls from the application to
// http://foo.bar.com will be upgraded to HTTPS and load balanced across
// the three domains specified above. In other words, a call to
// http://foo.bar.com/baz would be translated to
// https://uk.foo.bar.com/baz.
//
// NOTE: In the scenario above, the value of the HTTP Authority/host header
// associated with the outbound HTTP requests will be based on the
// endpoint's DNS name, i.e. ":authority: uk.foo.bar.com". Refer to Envoy's
// auto_host_rewrite for further details. The automatic rewrite can be
// overridden using a host rewrite route rule.
//
type ForeignService struct {
	// REQUIRED. The hosts associated with the external service. Could be a
	// DNS name with wildcard prefix or a CIDR prefix. Note that the hosts
	// field applies to all protocols. DNS names in hosts will be ignored if
	// the application accesses the service over non-HTTP protocols such as
	// mongo/opaque TCP/even HTTPS. In such scenarios, the port on which the
	// external service is being accessed must not be shared by any other
	// service in the mesh. In other words, the sidecar will behave as a
	// simple TCP proxy, forwarding incoming traffic on a specified port to
	// the specified destination endpoint IP/host.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// REQUIRED: The Ports associated with the external services.
	Ports []*ForeignService_PortMap `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
	// Service discovery mode for the hosts. If not set, Istio will attempt
	// to infer the discovery mode based on the value of hosts and endpoints.
	Discovery ForeignService_Discovery `protobuf:"varint,3,opt,name=discovery,enum=istio.routing.v1alpha2.ForeignService_Discovery" json:"discovery,omitempty"`
	// One or more endpoints associated with the service. Endpoints must be
	// accessible over the set of outPorts defined at the service level.
	Endpoints []*ForeignService_Endpoint `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *ForeignService) Reset()                    { *m = ForeignService{} }
func (m *ForeignService) String() string            { return proto.CompactTextString(m) }
func (*ForeignService) ProtoMessage()               {}
func (*ForeignService) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ForeignService) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *ForeignService) GetPorts() []*ForeignService_PortMap {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ForeignService) GetDiscovery() ForeignService_Discovery {
	if m != nil {
		return m.Discovery
	}
	return ForeignService_NONE
}

func (m *ForeignService) GetEndpoints() []*ForeignService_Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// PortMap describes the properties of a specific port of the external
// service, the port by which the service will be accessed inside the
// mesh and TLS upgrade options if any.
type ForeignService_PortMap struct {
	// REQUIRED: A valid non-negative integer port number on which
	// connections to the external service would be received.
	InPort uint32 `protobuf:"varint,1,opt,name=in_port,json=inPort" json:"in_port,omitempty"`
	// If specified, connections arriving on inPort will be rerouted to the
	// port specified in outPort. If outPort is omitted, it will inherit
	// the value of inPort. outPort is useful in situations where the
	// external service will be accessed inside the mesh over one port
	// (e.g., http on port 80), while the final call to the external
	// service must be made over a different port (e.g., https over port
	// 443).
	//
	// NOTE: outPort cannot be specified when the discovery mode is set to
	// "none".
	OutPort uint32 `protobuf:"varint,2,opt,name=out_port,json=outPort" json:"out_port,omitempty"`
	// The protocol exposed on the internal port. MUST BE one of
	// HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP. When protocol is set to HTTPS, the
	// traffic will be treated as opaque TCP traffic, and TCP level
	// constraints will apply.
	Protocol string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	// Name assigned to the port.
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Whether the sidecar should initiate a TLS connection for outbound
	// connections (outPort). This field is applicable only when the
	// protocol is _not_ HTTPS. If this field is set to true, the sidecar
	// will initiate a standard TLS connection without validating the
	// server's certificates. To customize the TLS settings, use
	// DestinationRules.
	TlsUpgrade bool `protobuf:"varint,5,opt,name=tls_upgrade,json=tlsUpgrade" json:"tls_upgrade,omitempty"`
}

func (m *ForeignService_PortMap) Reset()                    { *m = ForeignService_PortMap{} }
func (m *ForeignService_PortMap) String() string            { return proto.CompactTextString(m) }
func (*ForeignService_PortMap) ProtoMessage()               {}
func (*ForeignService_PortMap) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *ForeignService_PortMap) GetInPort() uint32 {
	if m != nil {
		return m.InPort
	}
	return 0
}

func (m *ForeignService_PortMap) GetOutPort() uint32 {
	if m != nil {
		return m.OutPort
	}
	return 0
}

func (m *ForeignService_PortMap) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ForeignService_PortMap) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ForeignService_PortMap) GetTlsUpgrade() bool {
	if m != nil {
		return m.TlsUpgrade
	}
	return false
}

// Endpoint defines a network address (IP or hostname) associated with
// the foreign service.
type ForeignService_Endpoint struct {
	// REQUIRED: Address associated with the network endpoint without the
	// port ( IP or fully qualified domain name without wildcards).
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ForeignService_Endpoint) Reset()                    { *m = ForeignService_Endpoint{} }
func (m *ForeignService_Endpoint) String() string            { return proto.CompactTextString(m) }
func (*ForeignService_Endpoint) ProtoMessage()               {}
func (*ForeignService_Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *ForeignService_Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ForeignService_Endpoint) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*ForeignService)(nil), "istio.routing.v1alpha2.ForeignService")
	proto.RegisterType((*ForeignService_PortMap)(nil), "istio.routing.v1alpha2.ForeignService.PortMap")
	proto.RegisterType((*ForeignService_Endpoint)(nil), "istio.routing.v1alpha2.ForeignService.Endpoint")
	proto.RegisterEnum("istio.routing.v1alpha2.ForeignService_Discovery", ForeignService_Discovery_name, ForeignService_Discovery_value)
}

func init() { proto.RegisterFile("routing/v1alpha2/foreign_service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x14, 0xc4, 0x4d, 0xda, 0x24, 0xaf, 0x62, 0x55, 0x3d, 0x21, 0x30, 0xbd, 0x10, 0xed, 0x01, 0x45,
	0x1c, 0x5c, 0x28, 0x17, 0x3e, 0x4e, 0x88, 0x16, 0x09, 0x89, 0x2d, 0xc8, 0x5d, 0xce, 0x95, 0xb7,
	0x31, 0x5d, 0x8b, 0x60, 0x47, 0xb6, 0x53, 0xa9, 0x7f, 0x82, 0x5f, 0xc3, 0xff, 0x03, 0xd5, 0x49,
	0x76, 0x41, 0xe2, 0xd0, 0xbd, 0x79, 0xde, 0x78, 0x26, 0x93, 0x79, 0x86, 0xa7, 0xd6, 0x34, 0x5e,
	0xe9, 0xdd, 0x6c, 0xff, 0x42, 0x54, 0xf5, 0xb5, 0x98, 0xcf, 0xbe, 0x19, 0x2b, 0xd5, 0x4e, 0x6f,
	0x9c, 0xb4, 0x7b, 0xb5, 0x95, 0xac, 0xb6, 0xc6, 0x1b, 0x7c, 0xa8, 0x9c, 0x57, 0x86, 0x75, 0xb7,
	0x59, 0x7f, 0xfb, 0xfc, 0x77, 0x0c, 0x67, 0x1f, 0x5a, 0xc5, 0xba, 0x15, 0xe0, 0x03, 0x18, 0x5e,
	0x1b, 0xe7, 0x1d, 0x25, 0x79, 0x54, 0x64, 0xbc, 0x05, 0xb8, 0x80, 0x61, 0x6d, 0xac, 0x77, 0x74,
	0x90, 0x47, 0xc5, 0x78, 0xce, 0xd8, 0xff, 0x0d, 0xd9, 0xbf, 0x66, 0xec, 0x8b, 0xb1, 0xfe, 0x42,
	0xd4, 0xbc, 0x15, 0xe3, 0x0a, 0xb2, 0x52, 0xb9, 0xad, 0xd9, 0x4b, 0x7b, 0xa0, 0x51, 0x4e, 0x8a,
	0xb3, 0xf9, 0xf3, 0x13, 0x9d, 0x16, 0xbd, 0x8e, 0xdf, 0x5a, 0xe0, 0x05, 0x64, 0x52, 0x97, 0xb5,
	0x51, 0xda, 0x3b, 0x1a, 0x87, 0x64, 0xb3, 0x13, 0xfd, 0x96, 0x9d, 0x8e, 0xdf, 0x3a, 0x4c, 0x7f,
	0x12, 0x48, 0xba, 0xc4, 0xf8, 0x08, 0x12, 0xa5, 0x37, 0xc7, 0xd8, 0x94, 0xe4, 0xa4, 0xb8, 0xcf,
	0x47, 0x4a, 0x1f, 0x39, 0x7c, 0x0c, 0xa9, 0x69, 0x7c, 0xcb, 0x0c, 0x02, 0x93, 0x98, 0xc6, 0x07,
	0x6a, 0x0a, 0x69, 0xa8, 0x7b, 0x6b, 0xaa, 0xf0, 0x77, 0x19, 0xbf, 0xc1, 0x88, 0x10, 0x6b, 0xf1,
	0x43, 0xd2, 0x38, 0xcc, 0xc3, 0x19, 0x9f, 0xc0, 0xd8, 0x57, 0x6e, 0xd3, 0xd4, 0x3b, 0x2b, 0x4a,
	0x49, 0x87, 0x39, 0x29, 0x52, 0x0e, 0xbe, 0x72, 0x5f, 0xdb, 0xc9, 0xf4, 0x17, 0x81, 0xb4, 0x0f,
	0x8a, 0x14, 0x12, 0x51, 0x96, 0x56, 0x3a, 0x17, 0x12, 0x65, 0xbc, 0x87, 0xb8, 0x86, 0x51, 0x25,
	0xae, 0x64, 0xd5, 0x6f, 0xe7, 0xed, 0x1d, 0x3b, 0x60, 0x9f, 0x82, 0x7a, 0xa9, 0xbd, 0x3d, 0xf0,
	0xce, 0x6a, 0xfa, 0x1a, 0xc6, 0x7f, 0x8d, 0x71, 0x02, 0xd1, 0x77, 0x79, 0xe8, 0xbe, 0x7c, 0x3c,
	0x1e, 0x1f, 0xca, 0x5e, 0x54, 0x8d, 0x0c, 0x2d, 0x64, 0xbc, 0x05, 0x6f, 0x06, 0xaf, 0xc8, 0xf9,
	0x33, 0xc8, 0x6e, 0xd6, 0x85, 0x29, 0xc4, 0xab, 0xcf, 0xab, 0xe5, 0xe4, 0x1e, 0x02, 0x8c, 0xd6,
	0x97, 0xef, 0x2e, 0x3f, 0xbe, 0x9f, 0x10, 0x4c, 0x20, 0x5a, 0xac, 0xd6, 0x93, 0xc1, 0xd5, 0x28,
	0x34, 0xf4, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xb4, 0xab, 0xc2, 0xca, 0x02, 0x00,
	0x00,
}
