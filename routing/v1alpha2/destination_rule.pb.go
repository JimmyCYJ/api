// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/destination_rule.proto

/*
Package istio_routing_v1alpha2 is a generated protocol buffer package.

It is generated from these files:
	routing/v1alpha2/destination_rule.proto
	routing/v1alpha2/gateway.proto
	routing/v1alpha2/route_rule.proto

It has these top-level messages:
	DestinationRule
	TrafficPolicy
	Subset
	LoadBalancerSettings
	ConnectionPoolSettings
	OutlierDetection
	TLSSettings
	Gateway
	Server
	RouteRule
	Destination
	HTTPRoute
	TCPRoute
	HTTPMatchRequest
	DestinationWeight
	L4MatchAttributes
	HTTPRedirect
	HTTPRewrite
	StringMatch
	HTTPRetry
	CorsPolicy
	HTTPFaultInjection
	PortSelector
*/
package istio_routing_v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Standard load balancing algorithms that require no tuning.
type LoadBalancerSettings_SimpleLB int32

const (
	// Round Robin policy. Default
	LoadBalancerSettings_ROUND_ROBIN LoadBalancerSettings_SimpleLB = 0
	// The least request load balancer uses an O(1) algorithm which selects
	// two random healthy hosts and picks the host which has fewer active
	// requests.
	LoadBalancerSettings_LEAST_CONN LoadBalancerSettings_SimpleLB = 1
	// The random load balancer selects a random healthy host. The random
	// load balancer generally performs better than round robin if no health
	// checking policy is configured.
	LoadBalancerSettings_RANDOM LoadBalancerSettings_SimpleLB = 2
	// This option will forward the connection to the original IP address
	// requested by the caller without doing any form of load
	// balancing. This option must be used with care. It is meant for
	// advanced use cases. Refer to Original Destination load balancer in
	// Envoy for further details.
	LoadBalancerSettings_PASSTHROUGH LoadBalancerSettings_SimpleLB = 3
)

var LoadBalancerSettings_SimpleLB_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_CONN",
	2: "RANDOM",
	3: "PASSTHROUGH",
}
var LoadBalancerSettings_SimpleLB_value = map[string]int32{
	"ROUND_ROBIN": 0,
	"LEAST_CONN":  1,
	"RANDOM":      2,
	"PASSTHROUGH": 3,
}

func (x LoadBalancerSettings_SimpleLB) String() string {
	return proto.EnumName(LoadBalancerSettings_SimpleLB_name, int32(x))
}
func (LoadBalancerSettings_SimpleLB) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

// TLS connection mode
type TLSSettings_TLSmode int32

const (
	// If set to "disable", the proxy will use not setup a TLS connection to the
	// upstream server. Default.
	TLSSettings_DISABLE TLSSettings_TLSmode = 0
	// If set to "simple", the proxy will originate a TLS connection to the
	// upstream server. Default.
	TLSSettings_SIMPLE TLSSettings_TLSmode = 1
	// If set to "mutual", the proxy will originate a TLS connection and
	// secure it using standard mTLS authentication.
	TLSSettings_MUTUAL TLSSettings_TLSmode = 2
)

var TLSSettings_TLSmode_name = map[int32]string{
	0: "DISABLE",
	1: "SIMPLE",
	2: "MUTUAL",
}
var TLSSettings_TLSmode_value = map[string]int32{
	"DISABLE": 0,
	"SIMPLE":  1,
	"MUTUAL":  2,
}

func (x TLSSettings_TLSmode) String() string {
	return proto.EnumName(TLSSettings_TLSmode_name, int32(x))
}
func (TLSSettings_TLSmode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// DestinationRule defines policies that apply to traffic intended for a
// service after routing has occurred. These rules specify configuration
// for load balancing, connection pool size from the sidecar, and outlier
// detection settings to detect and evict unhealthy hosts from the load
// balancing pool. For example, a simple load balancing policy for the
// ratings service would look as follows:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-ratings
//     spec:
//       name: ratings
//       trafficPolicy:
//         loadBalancer:
//           simple: LEAST_CONN
//
// Version specific DestinationRule can be specified by defining a named
// subset and overriding the settings specified at the service level. The
// following rule uses a round robin load balancing policy for all traffic
// going to a subset named testversion that is composed of endpoints (e.g.,
// pods) with labels (version:v3).
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-ratings
//     spec:
//       name: ratings
//       trafficPolicy:
//         loadBalancer:
//           simple: LEAST_CONN
//       subsets:
//       - name: testversion
//         labels:
//           version: v3
//         trafficPolicy:
//           loadBalancer:
//             simple: ROUND_ROBIN
//
// Note that policies specified for subsets will not take effect until
// a route rule explicitly sends traffic to this subset.
type DestinationRule struct {
	// REQUIRED. The destination address for traffic captured by this
	// rule.  Could be a DNS name with wildcard prefix or a CIDR
	// prefix. Depending on the platform, short-names can also be used
	// instead of a FQDN (i.e. has no dots in the name). In such a scenario,
	// the FQDN of the host would be derived based on the underlying
	// platform.
	//
	// For example on Kubernetes, when hosts contains a short name, Istio
	// will interpret the short name based on the namespace of the client
	// where rules are being applied. Thus, when a client in the "default"
	// namespace applies a rule containing a name "reviews", Istio will setup
	// routes to the "reviews.default.svc.cluster.local" service. However, if
	// a different name such as "reviews.sales" is used, it would be treated
	// as a FQDN during virtual host matching.  In Consul, a plain service
	// name would be resolved to the FQDN "reviews.service.consul".
	//
	// Note that the hosts field applies to both HTTP and TCP
	// services. Service inside the mesh, i.e. those found in the service
	// registry, must always be referred to using their alphanumeric
	// names. IP addresses or CIDR prefixes are allowed only for services
	// defined via the Gateway.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Traffic policies to apply (load balancing policy, connection pool
	// sizes, outlier detection).
	TrafficPolicy *TrafficPolicy `protobuf:"bytes,2,opt,name=traffic_policy,json=trafficPolicy" json:"traffic_policy,omitempty"`
	// One or more named sets that represent individual versions of a
	// service. Traffic policies can be overridden at subset level.
	Subsets []*Subset `protobuf:"bytes,3,rep,name=subsets" json:"subsets,omitempty"`
}

func (m *DestinationRule) Reset()                    { *m = DestinationRule{} }
func (m *DestinationRule) String() string            { return proto.CompactTextString(m) }
func (*DestinationRule) ProtoMessage()               {}
func (*DestinationRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DestinationRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DestinationRule) GetTrafficPolicy() *TrafficPolicy {
	if m != nil {
		return m.TrafficPolicy
	}
	return nil
}

func (m *DestinationRule) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

// Traffic policies to apply for a specific destination. See
// DestinationRule for examples.
type TrafficPolicy struct {
	// Settings controlling the load balancer algorithms.
	LoadBalancer *LoadBalancerSettings `protobuf:"bytes,1,opt,name=load_balancer,json=loadBalancer" json:"load_balancer,omitempty"`
	// Settings controlling the volume of connections to an upstream service
	ConnectionPool *ConnectionPoolSettings `protobuf:"bytes,2,opt,name=connection_pool,json=connectionPool" json:"connection_pool,omitempty"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool
	OutlierDetection *OutlierDetection `protobuf:"bytes,3,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	// TLS related settings for connections to the upstream service.
	Tls *TLSSettings `protobuf:"bytes,4,opt,name=tls" json:"tls,omitempty"`
}

func (m *TrafficPolicy) Reset()                    { *m = TrafficPolicy{} }
func (m *TrafficPolicy) String() string            { return proto.CompactTextString(m) }
func (*TrafficPolicy) ProtoMessage()               {}
func (*TrafficPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TrafficPolicy) GetLoadBalancer() *LoadBalancerSettings {
	if m != nil {
		return m.LoadBalancer
	}
	return nil
}

func (m *TrafficPolicy) GetConnectionPool() *ConnectionPoolSettings {
	if m != nil {
		return m.ConnectionPool
	}
	return nil
}

func (m *TrafficPolicy) GetOutlierDetection() *OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *TrafficPolicy) GetTls() *TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

// A subset of endpoints of a service. Subsets can be used for scenarios
// like A/B testing, or routing to a specific version of a service. Refer
// to Route Rules documentation for examples on using subsets in these
// scenarios. In addition, traffic policies defined at the service-level
// can be overridden at a subset-level. The following rule uses a round
// robin load balancing policy for all traffic going to a subset named
// testversion that is composed of endpoints (e.g., pods) with labels
// (version:v3).
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-ratings
//     spec:
//       name: ratings
//       trafficPolicy:
//         loadBalancer:
//           simple: LEAST_CONN
//       subsets:
//       - name: testversion
//         labels:
//           version: v3
//         trafficPolicy:
//           loadBalancer:
//             simple: ROUND_ROBIN
//
// Note that policies specified for subsets will not take effect until
// a route rule explicitly sends traffic to this subset.
type Subset struct {
	// REQUIRED. name of the subset. The service name and the subset name can
	// be used for traffic splitting in a route rule.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// REQUIRED. Labels apply a filter over the endpoints of a service in the
	// service registry. See route rules for examples of usage.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Traffic policies that apply to this subset. Subsets inherit the
	// traffic policies specified at the DestinationRule level. Settings
	// specified at the subset level will override the corresponding settings
	// specified at the DestinationRule level.
	TrafficPolicy *TrafficPolicy `protobuf:"bytes,3,opt,name=traffic_policy,json=trafficPolicy" json:"traffic_policy,omitempty"`
}

func (m *Subset) Reset()                    { *m = Subset{} }
func (m *Subset) String() string            { return proto.CompactTextString(m) }
func (*Subset) ProtoMessage()               {}
func (*Subset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Subset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subset) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Subset) GetTrafficPolicy() *TrafficPolicy {
	if m != nil {
		return m.TrafficPolicy
	}
	return nil
}

// Load balancing policies to apply for a specific destination. See Envoy's
// load balancing
// [documentation](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing.html)
// for more details.
//
// For example, the following rule uses a round robin load balancing policy
// for all traffic going to the ratings service.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-ratings
//     spec:
//       name: ratings
//       trafficPolicy:
//         loadBalancer:
//           simple: ROUND_ROBIN
//
// The following example uses the consistent hashing based load balancer
// for the same ratings service using the Cookie header as the hash key.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-ratings
//     spec:
//       name: ratings
//       trafficPolicy:
//         loadBalancer:
//           consistentHash:
//             http_header: Cookie
//
type LoadBalancerSettings struct {
	// Upstream load balancing policy.
	//
	// Types that are valid to be assigned to LbPolicy:
	//	*LoadBalancerSettings_Simple
	//	*LoadBalancerSettings_ConsistentHash
	LbPolicy isLoadBalancerSettings_LbPolicy `protobuf_oneof:"lb_policy"`
}

func (m *LoadBalancerSettings) Reset()                    { *m = LoadBalancerSettings{} }
func (m *LoadBalancerSettings) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancerSettings) ProtoMessage()               {}
func (*LoadBalancerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isLoadBalancerSettings_LbPolicy interface {
	isLoadBalancerSettings_LbPolicy()
}

type LoadBalancerSettings_Simple struct {
	Simple LoadBalancerSettings_SimpleLB `protobuf:"varint,1,opt,name=simple,enum=istio.routing.v1alpha2.LoadBalancerSettings_SimpleLB,oneof"`
}
type LoadBalancerSettings_ConsistentHash struct {
	ConsistentHash *LoadBalancerSettings_ConsistentHashLB `protobuf:"bytes,2,opt,name=consistent_hash,json=consistentHash,oneof"`
}

func (*LoadBalancerSettings_Simple) isLoadBalancerSettings_LbPolicy()         {}
func (*LoadBalancerSettings_ConsistentHash) isLoadBalancerSettings_LbPolicy() {}

func (m *LoadBalancerSettings) GetLbPolicy() isLoadBalancerSettings_LbPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return nil
}

func (m *LoadBalancerSettings) GetSimple() LoadBalancerSettings_SimpleLB {
	if x, ok := m.GetLbPolicy().(*LoadBalancerSettings_Simple); ok {
		return x.Simple
	}
	return LoadBalancerSettings_ROUND_ROBIN
}

func (m *LoadBalancerSettings) GetConsistentHash() *LoadBalancerSettings_ConsistentHashLB {
	if x, ok := m.GetLbPolicy().(*LoadBalancerSettings_ConsistentHash); ok {
		return x.ConsistentHash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoadBalancerSettings) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoadBalancerSettings_OneofMarshaler, _LoadBalancerSettings_OneofUnmarshaler, _LoadBalancerSettings_OneofSizer, []interface{}{
		(*LoadBalancerSettings_Simple)(nil),
		(*LoadBalancerSettings_ConsistentHash)(nil),
	}
}

func _LoadBalancerSettings_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoadBalancerSettings)
	// lb_policy
	switch x := m.LbPolicy.(type) {
	case *LoadBalancerSettings_Simple:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Simple))
	case *LoadBalancerSettings_ConsistentHash:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsistentHash); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LoadBalancerSettings.LbPolicy has unexpected type %T", x)
	}
	return nil
}

func _LoadBalancerSettings_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoadBalancerSettings)
	switch tag {
	case 1: // lb_policy.simple
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.LbPolicy = &LoadBalancerSettings_Simple{LoadBalancerSettings_SimpleLB(x)}
		return true, err
	case 2: // lb_policy.consistent_hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoadBalancerSettings_ConsistentHashLB)
		err := b.DecodeMessage(msg)
		m.LbPolicy = &LoadBalancerSettings_ConsistentHash{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LoadBalancerSettings_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoadBalancerSettings)
	// lb_policy
	switch x := m.LbPolicy.(type) {
	case *LoadBalancerSettings_Simple:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Simple))
	case *LoadBalancerSettings_ConsistentHash:
		s := proto.Size(x.ConsistentHash)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Consistent hashing (ketama hash) based load balancer for even load
// distribution/redistribution when the connection pool changes. This
// load balancing policy is applicable only for HTTP-based
// connections. A user specified HTTP header is used as the key with
// [xxHash](www.xxhash.com) hashing.
type LoadBalancerSettings_ConsistentHashLB struct {
	// REQUIRED. The name of the HTTP request header that will be used to
	// obtain the hash key. If the request header is not present, the load
	// balancer will use a random number as the hash, effectively making
	// the load balancing policy random.
	HttpHeader string `protobuf:"bytes,1,opt,name=http_header,json=httpHeader" json:"http_header,omitempty"`
	// The minimum number of virtual nodes to use for the hash
	// ring. Defaults to 1024. Larger ring sizes result in more granular
	// load distributions. If the number of hosts in the load balancing
	// pool is larger than the ring size, each host will be assigned a
	// single virtual node.
	MinimumRingSize uint32 `protobuf:"varint,2,opt,name=minimum_ring_size,json=minimumRingSize" json:"minimum_ring_size,omitempty"`
}

func (m *LoadBalancerSettings_ConsistentHashLB) Reset()         { *m = LoadBalancerSettings_ConsistentHashLB{} }
func (m *LoadBalancerSettings_ConsistentHashLB) String() string { return proto.CompactTextString(m) }
func (*LoadBalancerSettings_ConsistentHashLB) ProtoMessage()    {}
func (*LoadBalancerSettings_ConsistentHashLB) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *LoadBalancerSettings_ConsistentHashLB) GetHttpHeader() string {
	if m != nil {
		return m.HttpHeader
	}
	return ""
}

func (m *LoadBalancerSettings_ConsistentHashLB) GetMinimumRingSize() uint32 {
	if m != nil {
		return m.MinimumRingSize
	}
	return 0
}

// Connection pool settings for an upstream host. The settings apply to
// each individual host in the upstream service.  See Envoy's [circuit
// breaker](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/circuit_breaking)
// for more details. Connection pool settings can be applied at the TCP
// level as well as at HTTP level.
//
// For example, the following rule sets a limit of 100 connections to redis
// service called myredissrv with a connect timeout of 30ms
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: bookinfo-redis
//     spec:
//       destination:
//         name: myredissrv
//       connectionPool:
//         tcp:
//           maxConnections: 100
//           connectTimeout: 30ms
//
type ConnectionPoolSettings struct {
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *ConnectionPoolSettings_TCPSettings `protobuf:"bytes,1,opt,name=tcp" json:"tcp,omitempty"`
	// HTTP connection pool settings.
	Http *ConnectionPoolSettings_HTTPSettings `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
}

func (m *ConnectionPoolSettings) Reset()                    { *m = ConnectionPoolSettings{} }
func (m *ConnectionPoolSettings) String() string            { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings) ProtoMessage()               {}
func (*ConnectionPoolSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConnectionPoolSettings) GetTcp() *ConnectionPoolSettings_TCPSettings {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *ConnectionPoolSettings) GetHttp() *ConnectionPoolSettings_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Settings common to both HTTP and TCP upstream connections.
type ConnectionPoolSettings_TCPSettings struct {
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections int32 `protobuf:"varint,1,opt,name=max_connections,json=maxConnections" json:"max_connections,omitempty"`
	// TCP connection timeout.
	ConnectTimeout *google_protobuf.Duration `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
}

func (m *ConnectionPoolSettings_TCPSettings) Reset()         { *m = ConnectionPoolSettings_TCPSettings{} }
func (m *ConnectionPoolSettings_TCPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_TCPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_TCPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

func (m *ConnectionPoolSettings_TCPSettings) GetMaxConnections() int32 {
	if m != nil {
		return m.MaxConnections
	}
	return 0
}

func (m *ConnectionPoolSettings_TCPSettings) GetConnectTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

// Settings applicable to HTTP1.1/HTTP2/GRPC connections.
type ConnectionPoolSettings_HTTPSettings struct {
	// Maximum number of pending HTTP requests to a destination. Default 1024.
	Http1MaxPendingRequests int32 `protobuf:"varint,1,opt,name=http1_max_pending_requests,json=http1MaxPendingRequests" json:"http1_max_pending_requests,omitempty"`
	// Maximum number of requests to a backend. Default 1024.
	Http2MaxRequests int32 `protobuf:"varint,2,opt,name=http2_max_requests,json=http2MaxRequests" json:"http2_max_requests,omitempty"`
	// Maximum number of requests per connection to a backend. Setting this
	// parameter to 1 disables keep alive.
	MaxRequestsPerConnection int32 `protobuf:"varint,3,opt,name=max_requests_per_connection,json=maxRequestsPerConnection" json:"max_requests_per_connection,omitempty"`
	// Maximum number of retries that can be outstanding to all hosts in a
	// cluster at a given time. Defaults to 3.
	MaxRetries int32 `protobuf:"varint,4,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
}

func (m *ConnectionPoolSettings_HTTPSettings) Reset()         { *m = ConnectionPoolSettings_HTTPSettings{} }
func (m *ConnectionPoolSettings_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_HTTPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 1}
}

func (m *ConnectionPoolSettings_HTTPSettings) GetHttp1MaxPendingRequests() int32 {
	if m != nil {
		return m.Http1MaxPendingRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetHttp2MaxRequests() int32 {
	if m != nil {
		return m.Http2MaxRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRequestsPerConnection() int32 {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

// A Circuit breaker implementation that tracks the status of each
// individual host in the upstream service.  While currently applicable to
// only HTTP services, future versions will support opaque TCP services as
// well. For HTTP services, hosts that continually return errors for API
// calls are ejected from the pool for a pre-defined period of time. See
// Envoy's [outlier
// detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/outlier)
// for more details.
//
// The following rule sets a connection pool size of 100 connections and
// 1000 concurrent HTTP2 requests, with no more than 10 req/connection to
// "reviews" service. In addition, it configures upstream hosts to be
// scanned every 5 mins, such that any host that fails 7 consecutive times
// with 5XX error code will be ejected for 15 minutes.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: reviews-cb-policy
//     spec:
//       destination:
//         name: reviews
//       connectionPool:
//         tcp:
//           maxConnections: 100
//         http:
//           http2MaxRequests: 1000
//           maxRequestsPerConnection: 10
//       outlierDetection:
//         http:
//           consecutiveErrors: 7
//           interval: 5m
//           baseEjectionTime: 15m
//
type OutlierDetection struct {
	// Settings for HTTP1.1/HTTP2/GRPC connections.
	Http *OutlierDetection_HTTPSettings `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
}

func (m *OutlierDetection) Reset()                    { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string            { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()               {}
func (*OutlierDetection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OutlierDetection) GetHttp() *OutlierDetection_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Outlier detection settings for HTTP1.1/HTTP2/GRPC connections.
type OutlierDetection_HTTPSettings struct {
	// Number of 5XX errors before a host is ejected from the connection
	// pool. Defaults to 5.
	ConsecutiveErrors int32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. format:
	// 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.
	Interval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Minimum ejection duration. A host will remain ejected for a period
	// equal to the product of minimum ejection duration and the number of
	// times the host has been ejected. This technique allows the system to
	// automatically increase the ejection period for unhealthy upstream
	// servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.
	BaseEjectionTime *google_protobuf.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime" json:"base_ejection_time,omitempty"`
	// Maximum % of hosts in the load balancing pool for the upstream
	// service that can be ejected. Defaults to 10%.
	MaxEjectionPercent int32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent" json:"max_ejection_percent,omitempty"`
}

func (m *OutlierDetection_HTTPSettings) Reset()         { *m = OutlierDetection_HTTPSettings{} }
func (m *OutlierDetection_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection_HTTPSettings) ProtoMessage()    {}
func (*OutlierDetection_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *OutlierDetection_HTTPSettings) GetConsecutiveErrors() int32 {
	if m != nil {
		return m.ConsecutiveErrors
	}
	return 0
}

func (m *OutlierDetection_HTTPSettings) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetBaseEjectionTime() *google_protobuf.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetMaxEjectionPercent() int32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

// SSL/TLS related settings for upstream connections. See Envoy's [TLS
// context](https://www.envoyproxy.io/docs/envoy/latest/api-v1/cluster_manager/cluster_ssl.html#config-cluster-manager-cluster-ssl)
// for more details. These settings are common to both HTTP and TCP upstreams.
//
// For example, the following rule configures a client to use mutual TLS
// for connections to upstream database cluster.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: db-mtls
//     spec:
//       destination:
//         name: mydbserver
//       tls:
//         mode: MUTUAL
//         clientCertificate: myclient.cert
//         privateKey: client_private_key.key
//         serverCaBundle: certs.bundle
//
// The following rule configures a client to use TLS when talking to a foreign service whose domain matches *.foo.com.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: DestinationRule
//     metadata:
//       name: tls-foo
//     spec:
//       destination:
//         name: *.foo.com
//       tls:
//         mode: SIMPLE
//
type TLSSettings struct {
	// REQUIRED: Indicates whether connections to this port should be secured
	// using TLS.  The value of this field determines how TLS is enforced.
	Mode TLSSettings_TLSmode `protobuf:"varint,1,opt,name=mode,enum=istio.routing.v1alpha2.TLSSettings_TLSmode" json:"mode,omitempty"`
	// REQUIRED if mode == SIMPLE/MUTUAL. The name of the file holding the
	// client-side TLS certificate to use.  It is the responsibility of the
	// underlying platform to mount the certificate as a file under
	// /etc/istio/certs with the same name as the specified in this field.
	ClientCertificate string `protobuf:"bytes,2,opt,name=client_certificate,json=clientCertificate" json:"client_certificate,omitempty"`
	// REQUIRED if mode == SIMPLE/MUTUAL. The name of the file holding the
	// client's private key.  It is the responsibility of the underlying
	// platform to mount the certificate as a file under /etc/istio/certs
	// with the same name as the specified in this field.
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// A file containing certificate authority certificates to use in
	// verifying a presented server certificate.
	ServerCaBundle string `protobuf:"bytes,4,opt,name=server_ca_bundle,json=serverCaBundle" json:"server_ca_bundle,omitempty"`
	// A list of alternate names to verify the subject identity in the
	// certificate. If specified, the proxy will verify that the server
	// certificate's subject alt name matches one of the specified values.
	SubjectAltNames []string `protobuf:"bytes,5,rep,name=subject_alt_names,json=subjectAltNames" json:"subject_alt_names,omitempty"`
	// SNI string to present to the server during TLS handshake.
	Sni string `protobuf:"bytes,6,opt,name=sni" json:"sni,omitempty"`
}

func (m *TLSSettings) Reset()                    { *m = TLSSettings{} }
func (m *TLSSettings) String() string            { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()               {}
func (*TLSSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TLSSettings) GetMode() TLSSettings_TLSmode {
	if m != nil {
		return m.Mode
	}
	return TLSSettings_DISABLE
}

func (m *TLSSettings) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetServerCaBundle() string {
	if m != nil {
		return m.ServerCaBundle
	}
	return ""
}

func (m *TLSSettings) GetSubjectAltNames() []string {
	if m != nil {
		return m.SubjectAltNames
	}
	return nil
}

func (m *TLSSettings) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func init() {
	proto.RegisterType((*DestinationRule)(nil), "istio.routing.v1alpha2.DestinationRule")
	proto.RegisterType((*TrafficPolicy)(nil), "istio.routing.v1alpha2.TrafficPolicy")
	proto.RegisterType((*Subset)(nil), "istio.routing.v1alpha2.Subset")
	proto.RegisterType((*LoadBalancerSettings)(nil), "istio.routing.v1alpha2.LoadBalancerSettings")
	proto.RegisterType((*LoadBalancerSettings_ConsistentHashLB)(nil), "istio.routing.v1alpha2.LoadBalancerSettings.ConsistentHashLB")
	proto.RegisterType((*ConnectionPoolSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings")
	proto.RegisterType((*ConnectionPoolSettings_TCPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.TCPSettings")
	proto.RegisterType((*ConnectionPoolSettings_HTTPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.HTTPSettings")
	proto.RegisterType((*OutlierDetection)(nil), "istio.routing.v1alpha2.OutlierDetection")
	proto.RegisterType((*OutlierDetection_HTTPSettings)(nil), "istio.routing.v1alpha2.OutlierDetection.HTTPSettings")
	proto.RegisterType((*TLSSettings)(nil), "istio.routing.v1alpha2.TLSSettings")
	proto.RegisterEnum("istio.routing.v1alpha2.LoadBalancerSettings_SimpleLB", LoadBalancerSettings_SimpleLB_name, LoadBalancerSettings_SimpleLB_value)
	proto.RegisterEnum("istio.routing.v1alpha2.TLSSettings_TLSmode", TLSSettings_TLSmode_name, TLSSettings_TLSmode_value)
}

func init() { proto.RegisterFile("routing/v1alpha2/destination_rule.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1046 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0xbd, 0x89, 0x53, 0x1f, 0x37, 0xf6, 0x66, 0x14, 0x15, 0x63, 0xa4, 0x12, 0x19, 0xa1,
	0x5a, 0xa5, 0x6c, 0xa8, 0x51, 0xa4, 0xd2, 0xaa, 0x42, 0xfe, 0x53, 0x1d, 0xe1, 0xd8, 0x66, 0xec,
	0x88, 0xcb, 0xd5, 0x78, 0x3d, 0x89, 0x07, 0x66, 0x7f, 0xd8, 0x99, 0xb5, 0x92, 0xbc, 0x01, 0x57,
	0x3c, 0x09, 0xb7, 0xbc, 0x03, 0x57, 0x5c, 0xf3, 0x08, 0x5c, 0xf1, 0x0a, 0x68, 0x66, 0xc7, 0x3f,
	0x89, 0xec, 0xd2, 0x70, 0xb7, 0x7b, 0xce, 0x77, 0xbe, 0x39, 0x7f, 0xf3, 0x0d, 0x3c, 0x8b, 0xc3,
	0x44, 0xb2, 0xe0, 0xea, 0x64, 0xfe, 0x92, 0xf0, 0x68, 0x46, 0xea, 0x27, 0x53, 0x2a, 0x24, 0x0b,
	0x88, 0x64, 0x61, 0xe0, 0xc6, 0x09, 0xa7, 0x4e, 0x14, 0x87, 0x32, 0x44, 0x4f, 0x98, 0x90, 0x2c,
	0x74, 0x0c, 0xdc, 0x59, 0xc0, 0x2b, 0x4f, 0xaf, 0xc2, 0xf0, 0x8a, 0xd3, 0x13, 0x8d, 0x9a, 0x24,
	0x97, 0x27, 0xd3, 0x24, 0xd6, 0xc1, 0x69, 0x5c, 0xf5, 0xb7, 0x0c, 0x94, 0xda, 0x2b, 0x4a, 0x9c,
	0x70, 0x8a, 0x10, 0xec, 0x06, 0xc4, 0xa7, 0xe5, 0xcc, 0x71, 0xa6, 0x96, 0xc7, 0xfa, 0x1b, 0xf5,
	0xa0, 0x28, 0x63, 0x72, 0x79, 0xc9, 0x3c, 0x37, 0x0a, 0x39, 0xf3, 0x6e, 0xca, 0xd9, 0xe3, 0x4c,
	0xad, 0x50, 0xff, 0xdc, 0xd9, 0x7c, 0xb0, 0x33, 0x4e, 0xd1, 0x43, 0x0d, 0xc6, 0x07, 0x72, 0xfd,
	0x17, 0xbd, 0x82, 0x7d, 0x91, 0x4c, 0x04, 0x95, 0xa2, 0x6c, 0x1d, 0x5b, 0xb5, 0x42, 0xfd, 0xe9,
	0x36, 0x9a, 0x91, 0x86, 0xe1, 0x05, 0xbc, 0xfa, 0x47, 0x16, 0x0e, 0xee, 0x50, 0xa3, 0xef, 0xe1,
	0x80, 0x87, 0x64, 0xea, 0x4e, 0x08, 0x27, 0x81, 0x47, 0x63, 0x9d, 0x76, 0xa1, 0xfe, 0x62, 0x1b,
	0x63, 0x2f, 0x24, 0xd3, 0xa6, 0xc1, 0x8e, 0xa8, 0x54, 0x4e, 0x81, 0x1f, 0xf3, 0x35, 0x2b, 0xfa,
	0x01, 0x4a, 0x5e, 0x18, 0x04, 0xd4, 0xd3, 0x5d, 0x8e, 0xc2, 0x90, 0x9b, 0x6a, 0x9d, 0x6d, 0xa4,
	0xad, 0x25, 0x7c, 0x18, 0x86, 0x7c, 0x49, 0x5b, 0xf4, 0xee, 0xd8, 0xd1, 0x05, 0x1c, 0x86, 0x89,
	0xe4, 0x8c, 0xc6, 0xee, 0x94, 0xca, 0xd4, 0x51, 0xb6, 0x34, 0x75, 0x6d, 0x1b, 0xf5, 0x20, 0x0d,
	0x68, 0x2f, 0xf0, 0xd8, 0x0e, 0xef, 0x59, 0xd0, 0x29, 0x58, 0x92, 0x8b, 0xf2, 0xae, 0x26, 0xfa,
	0x6c, 0xeb, 0x44, 0x7a, 0xa3, 0x65, 0x62, 0x0a, 0x5f, 0xfd, 0x3b, 0x03, 0xb9, 0xb4, 0xbf, 0x1b,
	0x47, 0xde, 0x84, 0x1c, 0x27, 0x13, 0xca, 0x45, 0x39, 0xab, 0x67, 0xf4, 0xfc, 0xfd, 0x33, 0x72,
	0x7a, 0x1a, 0xdc, 0x09, 0x64, 0x7c, 0x83, 0x4d, 0xe4, 0x86, 0xb5, 0xb1, 0xfe, 0xff, 0xda, 0x54,
	0xbe, 0x81, 0xc2, 0xda, 0x21, 0xc8, 0x06, 0xeb, 0x27, 0x7a, 0x63, 0x72, 0x56, 0x9f, 0xe8, 0x08,
	0xf6, 0xe6, 0x84, 0x27, 0x54, 0x8f, 0x2b, 0x8f, 0xd3, 0x9f, 0xd7, 0xd9, 0x57, 0x99, 0xea, 0x2f,
	0x16, 0x1c, 0x6d, 0x9a, 0x3c, 0x1a, 0x40, 0x4e, 0x30, 0x3f, 0xe2, 0x69, 0xed, 0xc5, 0xfa, 0xe9,
	0x43, 0xf6, 0xc6, 0x19, 0xe9, 0xd0, 0x5e, 0xb3, 0xbb, 0x83, 0x0d, 0x0d, 0x9a, 0xe9, 0xe5, 0x11,
	0x4c, 0x48, 0x1a, 0x48, 0x77, 0x46, 0xc4, 0xcc, 0x2c, 0xcf, 0xdb, 0x07, 0x31, 0xb7, 0x96, 0x1c,
	0x5d, 0x22, 0x66, 0xfa, 0x84, 0xa2, 0x77, 0xc7, 0x56, 0x71, 0xc1, 0xbe, 0x8f, 0x42, 0x9f, 0x42,
	0x61, 0x26, 0x65, 0xe4, 0xce, 0x28, 0x99, 0x9a, 0xbb, 0x90, 0xc7, 0xa0, 0x4c, 0x5d, 0x6d, 0x41,
	0xcf, 0xe1, 0xd0, 0x67, 0x01, 0xf3, 0x13, 0xdf, 0x8d, 0x59, 0x70, 0xe5, 0x0a, 0x76, 0x9b, 0xb6,
	0xeb, 0x00, 0x97, 0x8c, 0x03, 0xb3, 0xe0, 0x6a, 0xc4, 0x6e, 0x69, 0xb5, 0x0b, 0x8f, 0x16, 0x05,
	0xa2, 0x12, 0x14, 0xf0, 0xe0, 0xa2, 0xdf, 0x76, 0xf1, 0xa0, 0x79, 0xd6, 0xb7, 0x77, 0x50, 0x11,
	0xa0, 0xd7, 0x69, 0x8c, 0xc6, 0x6e, 0x6b, 0xd0, 0xef, 0xdb, 0x19, 0x04, 0x90, 0xc3, 0x8d, 0x7e,
	0x7b, 0x70, 0x6e, 0x67, 0x15, 0x78, 0xd8, 0x18, 0x8d, 0xc6, 0x5d, 0x3c, 0xb8, 0x78, 0xd7, 0xb5,
	0xad, 0x66, 0x01, 0xf2, 0x7c, 0x62, 0x56, 0xa0, 0xfa, 0xeb, 0x2e, 0x3c, 0xd9, 0x7c, 0x61, 0x50,
	0x0f, 0x2c, 0xe9, 0x45, 0xe6, 0x0a, 0xbf, 0x7e, 0xd8, 0x6d, 0x73, 0xc6, 0xad, 0xe1, 0xda, 0x82,
	0x7b, 0x11, 0x1a, 0xc0, 0xae, 0xaa, 0xdc, 0xf4, 0xff, 0xcd, 0x03, 0xe9, 0xba, 0xe3, 0xf1, 0x8a,
	0x4f, 0x13, 0x55, 0x6e, 0xa1, 0xb0, 0x76, 0x08, 0x7a, 0x06, 0x25, 0x9f, 0x5c, 0xbb, 0xab, 0x4b,
	0x2e, 0x74, 0xe6, 0x7b, 0xb8, 0xe8, 0x93, 0xeb, 0x15, 0xab, 0x40, 0xcd, 0xa5, 0xa0, 0xb8, 0x92,
	0xf9, 0x34, 0x4c, 0xa4, 0xc9, 0xe9, 0x63, 0x27, 0xd5, 0x67, 0x67, 0xa1, 0xcf, 0x4e, 0xdb, 0xe8,
	0xf3, 0x52, 0x3b, 0xc6, 0x69, 0x40, 0xe5, 0xaf, 0x0c, 0x3c, 0x5e, 0x4f, 0x09, 0xbd, 0x81, 0x8a,
	0x4a, 0xea, 0xa5, 0xab, 0x72, 0x88, 0x68, 0x30, 0x55, 0xe3, 0x8c, 0xe9, 0xcf, 0x09, 0x15, 0x72,
	0x91, 0xc8, 0x47, 0x1a, 0x71, 0x4e, 0xae, 0x87, 0xa9, 0x1f, 0x1b, 0x37, 0x7a, 0x01, 0x48, 0xb9,
	0xea, 0x3a, 0x78, 0x19, 0x94, 0xd5, 0x41, 0xb6, 0xf6, 0x9c, 0x93, 0xeb, 0x25, 0xfa, 0x2d, 0x7c,
	0xb2, 0x8e, 0x73, 0x23, 0x1a, 0xaf, 0x55, 0xad, 0xef, 0xf4, 0x1e, 0x2e, 0xfb, 0xab, 0x88, 0x21,
	0x8d, 0x57, 0xf5, 0xab, 0xa5, 0x4c, 0xc3, 0x65, 0xcc, 0x68, 0xaa, 0x53, 0x7b, 0x18, 0x34, 0x5c,
	0x5b, 0xaa, 0x7f, 0x66, 0xc1, 0xbe, 0xaf, 0x73, 0xe8, 0xcc, 0x4c, 0x2f, 0x5d, 0x86, 0xd3, 0x0f,
	0xd5, 0xc7, 0x4d, 0x73, 0xfb, 0xe7, 0x7e, 0xef, 0xbe, 0x04, 0xa4, 0x2e, 0x13, 0xf5, 0x12, 0xc9,
	0xe6, 0xd4, 0xa5, 0x71, 0x1c, 0xc6, 0x8b, 0x9e, 0x1d, 0xae, 0x79, 0x3a, 0xda, 0x81, 0x4e, 0xe1,
	0x11, 0x0b, 0x24, 0x8d, 0xe7, 0x84, 0xff, 0xf7, 0xe0, 0x96, 0x50, 0xf4, 0x0e, 0xd0, 0x84, 0x08,
	0xea, 0xd2, 0x1f, 0xcd, 0x53, 0xa2, 0x86, 0x6f, 0x14, 0xf0, 0x3d, 0x04, 0xb6, 0x0a, 0xea, 0x98,
	0x18, 0x35, 0x7e, 0xf4, 0x15, 0x1c, 0xa9, 0x06, 0x2e, 0x79, 0x22, 0x1a, 0x7b, 0x34, 0x90, 0xa6,
	0x93, 0xc8, 0x27, 0xd7, 0x0b, 0xf8, 0x30, 0xf5, 0x54, 0x7f, 0xcf, 0x42, 0x61, 0x4d, 0xf0, 0xd1,
	0xb7, 0xb0, 0xeb, 0x87, 0xd3, 0x85, 0xc8, 0x7d, 0xf1, 0x01, 0x6f, 0x84, 0xfa, 0x56, 0x21, 0x58,
	0x07, 0xea, 0x8e, 0x71, 0xa6, 0x24, 0xcd, 0xa3, 0xb1, 0x64, 0x97, 0xcc, 0x23, 0x72, 0xa1, 0xb3,
	0x87, 0xa9, 0xa7, 0xb5, 0x72, 0xa8, 0x91, 0x47, 0x31, 0x9b, 0x13, 0x49, 0x5d, 0xa5, 0xd1, 0x56,
	0xaa, 0x43, 0xc6, 0xf4, 0x1d, 0xbd, 0x41, 0x35, 0xb0, 0x05, 0x8d, 0xe7, 0x6a, 0x91, 0x88, 0x3b,
	0x49, 0x82, 0x29, 0xa7, 0xba, 0x9c, 0x3c, 0x2e, 0xa6, 0xf6, 0x16, 0x69, 0x6a, 0xab, 0x52, 0x2c,
	0x91, 0x4c, 0x54, 0x7d, 0x2e, 0xe1, 0xd2, 0x55, 0x6f, 0x93, 0x28, 0xef, 0x1d, 0x5b, 0xb5, 0x3c,
	0x2e, 0x19, 0x47, 0x83, 0xcb, 0xbe, 0x32, 0xab, 0x27, 0x41, 0x04, 0xac, 0x9c, 0x4b, 0x9f, 0x04,
	0x11, 0xb0, 0xaa, 0x03, 0xfb, 0xa6, 0x10, 0x54, 0x80, 0xfd, 0xf6, 0xd9, 0xa8, 0xd1, 0xec, 0x75,
	0xec, 0x1d, 0x25, 0x57, 0xa3, 0xb3, 0xf3, 0x61, 0xaf, 0x93, 0x4a, 0xd7, 0xf9, 0xc5, 0xf8, 0xa2,
	0xd1, 0xb3, 0xb3, 0x93, 0x9c, 0x9e, 0xc7, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xf1,
	0x07, 0x09, 0x7a, 0x09, 0x00, 0x00,
}
