// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "routing/v1alpha2/gateway.proto";

package istio.routing.v1alpha2;

// Foreign services describe the properties of services outside Istio. It
// contains a white-listed set of mesh-external domains and IP blocks that
// services in the mesh are allowed to access. A subset of features from
// routing rules and all features of destination rules can be applied on
// the service described by a foreign service.
//
// Services using HTTPS will be treated as opaque TCP services. If features
// provided by routing rules (e.g., URL rewrites) or HTTP-level metrics
// generated by Envoy are required, the service must be accessed over
// HTTP. The sidecar will perform TLS origination on behalf of the
// application.
//
// NOTE 1: that domains denoted by foreign services will be visible at all
// sidecars in the mesh.
//
// NOTE 2: There can be ONLY ONE ForeignServices configuration for the
// entire mesh.
//
// For example, the following foreign services configuration describes the
// set of services hosted under the *.foo.com domain and example.bar.com
// domain
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignServices
//     metadata:
//       name: foreign-svc
//     spec:
//       services:
//       - hosts:
//         - *.foo.com
//         ports:
//         - number: 443
//           name: https
//           protocol: HTTPS
//         - number: 80
//           name: http
//           protocol: HTTP
//         resolution: passthrough
//       - hosts:
//         - example.bar.com
//         ports:
//         - number: 443
//           name: https
//           protocol: HTTPS
//         resolution: DNS
//
// Route rules can be applied to services described in the ForeignServices
// resource. The following sample route rule rewrites /foocatalog to
// /barcatalog before forwarding the call to the intended destination.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: foo-rule
//     spec:
//       hosts:
//       - *.foo.com
//       http:
//       - match:
//         - uri:
//             prefix: /foocatalog
//         rewrite:
//           uri: /barcatalog
//
message ForeignServices {
  // REQUIRED: A list of server specifications.
  repeated Service services = 1;
}

// Service describes the properties of the external service that should be made accessible from within the mesh. For example,
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignServices
//     metadata:
//       name: foreign-svc
//     spec:
//       services:
//       - hosts:
//         - *.foo.com
//         ports:
//         - number: 80
//           protocol: HTTP2
//           name: http2
//         resolution: passthrough
//       - hosts:
//         - 192.192.33.33/16
//         ports:
//         - number: 27018
//           protocol: MONGO
//           name: mongo
//         resolution: passthrough
//
message Service {
  // REQUIRED. The destination address of the external service. Could be a
  // DNS name with wildcard prefix or a CIDR prefix. Note that the hosts
  // field applies to both HTTP and TCP services.
  repeated string hosts = 1;

  // Port describes the properties of a specific port of a service.
  message Port {
    // REQUIRED: A valid non-negative integer port number.
    uint32 number = 1;

    // The protocol exposed on the port.
    // MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP.
    string protocol = 2;

    // Label assigned to the port.
    string name = 3;
  }

  // REQUIRED: The Ports associated with the external services.
  repeated Port ports = 2;

  // Different ways of resolving the IP address of the service.
  enum Resolution {
    // If set to "local", the proxy will assume that incoming connections
    // have already been resolved (to a specific destination IP
    // address). Such connections are typically routed via the proxy using
    // mechanisms such as IP table REDIRECT/ eBPF. After performing any
    // routing related transformations, the proxy will forward the
    // connection to the IP address to which the connection was bound.
    LOCAL = 0;

    // If set to "static", Istio will attempt to resolve the DNS name into
    // a set of IP addresses, and use the resulting set as the load
    // balancing pool for the service. Note that static mode is applicable
    // only when the hosts use exact DNS names without any wildcards.
    STATIC = 1;

    // If set to "dynamic", the proxy will attempt to resolve the DNS
    // address during request processing. Use this mode if the set of
    // resolved addresses change dynamically. Dynamic mode is applicable
    // only when the hosts use exact DNS names without any wildcards.
    DYNAMIC = 2;
  };

  // DNS resolution mode for the hosts.
  Resolution resolution = 3;
}
